// <auto-generated />
using System;
using Employment.WPF.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Employment.WPF.Migrations
{
    [DbContext(typeof(EmploymentContext))]
    partial class EmploymentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Employment.WPF.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AddressId"));

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<string>("House")
                        .HasColumnType("text");

                    b.Property<int>("LocalityId")
                        .HasColumnType("integer");

                    b.Property<int>("StreetId")
                        .HasColumnType("integer");

                    b.HasKey("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ExternalId");

                    b.HasIndex("LocalityId");

                    b.HasIndex("StreetId");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            AddressId = 898,
                            Apartment = "116",
                            ExternalId = new Guid("09dc7a08-b773-44cb-9bf2-6b826da12703"),
                            House = "19",
                            LocalityId = 905,
                            StreetId = 918
                        },
                        new
                        {
                            AddressId = 897,
                            Apartment = "83",
                            ExternalId = new Guid("09dc7a08-b773-44cb-9bf2-6b826da12703"),
                            House = "97",
                            LocalityId = 907,
                            StreetId = 920
                        },
                        new
                        {
                            AddressId = 892,
                            Apartment = "37",
                            ExternalId = new Guid("305d33d0-4be9-4fb9-a10e-4e7039911815"),
                            House = "84",
                            LocalityId = 903,
                            StreetId = 912
                        },
                        new
                        {
                            AddressId = 891,
                            Apartment = "24",
                            ExternalId = new Guid("305d33d0-4be9-4fb9-a10e-4e7039911815"),
                            House = "34",
                            LocalityId = 909,
                            StreetId = 919
                        },
                        new
                        {
                            AddressId = 886,
                            Apartment = "78",
                            ExternalId = new Guid("00cb7216-f4b6-43db-8849-e18bbb48272c"),
                            House = "73",
                            LocalityId = 906,
                            StreetId = 915
                        },
                        new
                        {
                            AddressId = 885,
                            Apartment = "155",
                            ExternalId = new Guid("00cb7216-f4b6-43db-8849-e18bbb48272c"),
                            House = "56",
                            LocalityId = 902,
                            StreetId = 917
                        },
                        new
                        {
                            AddressId = 880,
                            Apartment = "37",
                            ExternalId = new Guid("1c46902e-e53b-41e9-8517-d274a50cdc2f"),
                            House = "79",
                            LocalityId = 901,
                            StreetId = 920
                        },
                        new
                        {
                            AddressId = 879,
                            Apartment = "38",
                            ExternalId = new Guid("1c46902e-e53b-41e9-8517-d274a50cdc2f"),
                            House = "66",
                            LocalityId = 907,
                            StreetId = 912
                        },
                        new
                        {
                            AddressId = 874,
                            Apartment = "159",
                            ExternalId = new Guid("95c018c1-80a7-4428-bcd0-738e0e2a3b1a"),
                            House = "35",
                            LocalityId = 907,
                            StreetId = 912
                        },
                        new
                        {
                            AddressId = 873,
                            Apartment = "75",
                            ExternalId = new Guid("95c018c1-80a7-4428-bcd0-738e0e2a3b1a"),
                            House = "63",
                            LocalityId = 903,
                            StreetId = 919
                        },
                        new
                        {
                            AddressId = 868,
                            Apartment = "63",
                            ExternalId = new Guid("fc856d8a-ec49-4b58-bfe2-4228dd2d02bc"),
                            House = "72",
                            LocalityId = 901,
                            StreetId = 914
                        },
                        new
                        {
                            AddressId = 867,
                            Apartment = "51",
                            ExternalId = new Guid("fc856d8a-ec49-4b58-bfe2-4228dd2d02bc"),
                            House = "60",
                            LocalityId = 906,
                            StreetId = 918
                        },
                        new
                        {
                            AddressId = 862,
                            Apartment = "146",
                            ExternalId = new Guid("7533b048-2445-4836-8f14-b6acb4c825c4"),
                            House = "35",
                            LocalityId = 905,
                            StreetId = 914
                        },
                        new
                        {
                            AddressId = 861,
                            Apartment = "79",
                            ExternalId = new Guid("7533b048-2445-4836-8f14-b6acb4c825c4"),
                            House = "9",
                            LocalityId = 904,
                            StreetId = 916
                        },
                        new
                        {
                            AddressId = 856,
                            Apartment = "114",
                            ExternalId = new Guid("dc0ab0c3-861e-453f-b626-7b769aa0b7ec"),
                            House = "18",
                            LocalityId = 904,
                            StreetId = 911
                        },
                        new
                        {
                            AddressId = 855,
                            Apartment = "36",
                            ExternalId = new Guid("dc0ab0c3-861e-453f-b626-7b769aa0b7ec"),
                            House = "74",
                            LocalityId = 903,
                            StreetId = 918
                        },
                        new
                        {
                            AddressId = 850,
                            Apartment = "50",
                            ExternalId = new Guid("b03e0f65-250c-4b83-b6e8-515cd65902a6"),
                            House = "64",
                            LocalityId = 906,
                            StreetId = 915
                        },
                        new
                        {
                            AddressId = 849,
                            Apartment = "155",
                            ExternalId = new Guid("b03e0f65-250c-4b83-b6e8-515cd65902a6"),
                            House = "8",
                            LocalityId = 910,
                            StreetId = 917
                        },
                        new
                        {
                            AddressId = 844,
                            Apartment = "160",
                            ExternalId = new Guid("95f9bf51-47de-4480-ab55-38a344209670"),
                            House = "11",
                            LocalityId = 902,
                            StreetId = 920
                        },
                        new
                        {
                            AddressId = 843,
                            Apartment = "48",
                            ExternalId = new Guid("95f9bf51-47de-4480-ab55-38a344209670"),
                            House = "54",
                            LocalityId = 905,
                            StreetId = 911
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            CompanyId = new Guid("09dc7a08-b773-44cb-9bf2-6b826da12703"),
                            Email = "daisy@mail.ru",
                            Name = "ООО Ромашка",
                            ShortName = "Ромашка"
                        },
                        new
                        {
                            CompanyId = new Guid("305d33d0-4be9-4fb9-a10e-4e7039911815"),
                            Email = "sunflower@mail.ru",
                            Name = "ЗАО Подсолнух",
                            ShortName = "Подсолнух"
                        },
                        new
                        {
                            CompanyId = new Guid("00cb7216-f4b6-43db-8849-e18bbb48272c"),
                            Email = "forest@mail.ru",
                            Name = "ПАО Лес",
                            ShortName = "Лес"
                        },
                        new
                        {
                            CompanyId = new Guid("1c46902e-e53b-41e9-8517-d274a50cdc2f"),
                            Email = "horizon@mail.ru",
                            Name = "ООО Горизонт",
                            ShortName = "Горизонт"
                        },
                        new
                        {
                            CompanyId = new Guid("95c018c1-80a7-4428-bcd0-738e0e2a3b1a"),
                            Email = "breeze@mail.ru",
                            Name = "ЗАО Ветерок",
                            ShortName = "Ветерок"
                        },
                        new
                        {
                            CompanyId = new Guid("fc856d8a-ec49-4b58-bfe2-4228dd2d02bc"),
                            Email = "sunset@mail.ru",
                            Name = "ПАО Закат",
                            ShortName = "Закат"
                        },
                        new
                        {
                            CompanyId = new Guid("7533b048-2445-4836-8f14-b6acb4c825c4"),
                            Email = "firefly@mail.ru",
                            Name = "ООО Светлячок",
                            ShortName = "Светлячок"
                        },
                        new
                        {
                            CompanyId = new Guid("dc0ab0c3-861e-453f-b626-7b769aa0b7ec"),
                            Email = "mountain@mail.ru",
                            Name = "ООО Гора",
                            ShortName = "Гора"
                        },
                        new
                        {
                            CompanyId = new Guid("b03e0f65-250c-4b83-b6e8-515cd65902a6"),
                            Email = "wave@mail.ru",
                            Name = "ПАО Волна",
                            ShortName = "Волна"
                        },
                        new
                        {
                            CompanyId = new Guid("95f9bf51-47de-4480-ab55-38a344209670"),
                            Email = "valley@mail.ru",
                            Name = "ООО Долина",
                            ShortName = "Долина"
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EducationId"));

                    b.Property<string>("Level")
                        .HasColumnType("text");

                    b.HasKey("EducationId");

                    b.ToTable("Education");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            Level = "Начальное образование"
                        },
                        new
                        {
                            EducationId = 2,
                            Level = "Основное общее образование"
                        },
                        new
                        {
                            EducationId = 3,
                            Level = "Среднее общее образование"
                        },
                        new
                        {
                            EducationId = 4,
                            Level = "Среднее профессиональное образование"
                        },
                        new
                        {
                            EducationId = 5,
                            Level = "Высшее образование"
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.Locality", b =>
                {
                    b.Property<int>("LocalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocalityId"));

                    b.Property<int>("LocalityTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.HasKey("LocalityId");

                    b.HasIndex("LocalityTypeId");

                    b.ToTable("Locality");

                    b.HasData(
                        new
                        {
                            LocalityId = 910,
                            LocalityTypeId = 5,
                            Name = "Погорелка"
                        },
                        new
                        {
                            LocalityId = 909,
                            LocalityTypeId = 3,
                            Name = "Дубровка"
                        },
                        new
                        {
                            LocalityId = 908,
                            LocalityTypeId = 2,
                            Name = "Вязовка"
                        },
                        new
                        {
                            LocalityId = 907,
                            LocalityTypeId = 3,
                            Name = "Каменка"
                        },
                        new
                        {
                            LocalityId = 906,
                            LocalityTypeId = 2,
                            Name = "Березовка"
                        },
                        new
                        {
                            LocalityId = 905,
                            LocalityTypeId = 4,
                            Name = "Степаново"
                        },
                        new
                        {
                            LocalityId = 904,
                            LocalityTypeId = 1,
                            Name = "Липово"
                        },
                        new
                        {
                            LocalityId = 903,
                            LocalityTypeId = 1,
                            Name = "Заборье"
                        },
                        new
                        {
                            LocalityId = 902,
                            LocalityTypeId = 3,
                            Name = "Терновка"
                        },
                        new
                        {
                            LocalityId = 901,
                            LocalityTypeId = 2,
                            Name = "Черничка"
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.LocalityType", b =>
                {
                    b.Property<int>("LocalityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocalityTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.HasKey("LocalityTypeId");

                    b.ToTable("LocalityType");

                    b.HasData(
                        new
                        {
                            LocalityTypeId = 1,
                            Name = "Город",
                            ShortName = "г."
                        },
                        new
                        {
                            LocalityTypeId = 2,
                            Name = "Поселок",
                            ShortName = "п."
                        },
                        new
                        {
                            LocalityTypeId = 3,
                            Name = "Деревня",
                            ShortName = "д."
                        },
                        new
                        {
                            LocalityTypeId = 4,
                            Name = "Хутор",
                            ShortName = "х."
                        },
                        new
                        {
                            LocalityTypeId = 5,
                            Name = "Село",
                            ShortName = "с."
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.Phone", b =>
                {
                    b.Property<int>("PhoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PhoneId"));

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PhoneId");

                    b.HasIndex("ExternalId");

                    b.ToTable("Phone");

                    b.HasData(
                        new
                        {
                            PhoneId = 900,
                            EntityType = 0,
                            ExternalId = new Guid("09dc7a08-b773-44cb-9bf2-6b826da12703"),
                            PhoneNumber = "+79151707023"
                        },
                        new
                        {
                            PhoneId = 899,
                            EntityType = 0,
                            ExternalId = new Guid("09dc7a08-b773-44cb-9bf2-6b826da12703"),
                            PhoneNumber = "+79413929466"
                        },
                        new
                        {
                            PhoneId = 894,
                            EntityType = 0,
                            ExternalId = new Guid("305d33d0-4be9-4fb9-a10e-4e7039911815"),
                            PhoneNumber = "+79114779875"
                        },
                        new
                        {
                            PhoneId = 893,
                            EntityType = 0,
                            ExternalId = new Guid("305d33d0-4be9-4fb9-a10e-4e7039911815"),
                            PhoneNumber = "+79089323170"
                        },
                        new
                        {
                            PhoneId = 888,
                            EntityType = 0,
                            ExternalId = new Guid("00cb7216-f4b6-43db-8849-e18bbb48272c"),
                            PhoneNumber = "+79249244390"
                        },
                        new
                        {
                            PhoneId = 887,
                            EntityType = 0,
                            ExternalId = new Guid("00cb7216-f4b6-43db-8849-e18bbb48272c"),
                            PhoneNumber = "+79144383346"
                        },
                        new
                        {
                            PhoneId = 882,
                            EntityType = 0,
                            ExternalId = new Guid("1c46902e-e53b-41e9-8517-d274a50cdc2f"),
                            PhoneNumber = "+79453151667"
                        },
                        new
                        {
                            PhoneId = 881,
                            EntityType = 0,
                            ExternalId = new Guid("1c46902e-e53b-41e9-8517-d274a50cdc2f"),
                            PhoneNumber = "+79177094732"
                        },
                        new
                        {
                            PhoneId = 876,
                            EntityType = 0,
                            ExternalId = new Guid("95c018c1-80a7-4428-bcd0-738e0e2a3b1a"),
                            PhoneNumber = "+79018235088"
                        },
                        new
                        {
                            PhoneId = 875,
                            EntityType = 0,
                            ExternalId = new Guid("95c018c1-80a7-4428-bcd0-738e0e2a3b1a"),
                            PhoneNumber = "+79653241789"
                        },
                        new
                        {
                            PhoneId = 870,
                            EntityType = 0,
                            ExternalId = new Guid("fc856d8a-ec49-4b58-bfe2-4228dd2d02bc"),
                            PhoneNumber = "+79833204229"
                        },
                        new
                        {
                            PhoneId = 869,
                            EntityType = 0,
                            ExternalId = new Guid("fc856d8a-ec49-4b58-bfe2-4228dd2d02bc"),
                            PhoneNumber = "+79987271047"
                        },
                        new
                        {
                            PhoneId = 864,
                            EntityType = 0,
                            ExternalId = new Guid("7533b048-2445-4836-8f14-b6acb4c825c4"),
                            PhoneNumber = "+79979828709"
                        },
                        new
                        {
                            PhoneId = 863,
                            EntityType = 0,
                            ExternalId = new Guid("7533b048-2445-4836-8f14-b6acb4c825c4"),
                            PhoneNumber = "+79323563025"
                        },
                        new
                        {
                            PhoneId = 858,
                            EntityType = 0,
                            ExternalId = new Guid("dc0ab0c3-861e-453f-b626-7b769aa0b7ec"),
                            PhoneNumber = "+79551407915"
                        },
                        new
                        {
                            PhoneId = 857,
                            EntityType = 0,
                            ExternalId = new Guid("dc0ab0c3-861e-453f-b626-7b769aa0b7ec"),
                            PhoneNumber = "+79686073694"
                        },
                        new
                        {
                            PhoneId = 852,
                            EntityType = 0,
                            ExternalId = new Guid("b03e0f65-250c-4b83-b6e8-515cd65902a6"),
                            PhoneNumber = "+79144155083"
                        },
                        new
                        {
                            PhoneId = 851,
                            EntityType = 0,
                            ExternalId = new Guid("b03e0f65-250c-4b83-b6e8-515cd65902a6"),
                            PhoneNumber = "+79441498072"
                        },
                        new
                        {
                            PhoneId = 846,
                            EntityType = 0,
                            ExternalId = new Guid("95f9bf51-47de-4480-ab55-38a344209670"),
                            PhoneNumber = "+79275872049"
                        },
                        new
                        {
                            PhoneId = 845,
                            EntityType = 0,
                            ExternalId = new Guid("95f9bf51-47de-4480-ab55-38a344209670"),
                            PhoneNumber = "+79052688856"
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PositionId"));

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("PositionId");

                    b.ToTable("Position");

                    b.HasData(
                        new
                        {
                            PositionId = 1,
                            Title = "Программист"
                        },
                        new
                        {
                            PositionId = 2,
                            Title = "Дизайнер"
                        },
                        new
                        {
                            PositionId = 3,
                            Title = "Менеджер проекта"
                        },
                        new
                        {
                            PositionId = 4,
                            Title = "Аналитик"
                        },
                        new
                        {
                            PositionId = 5,
                            Title = "Тестировщик"
                        },
                        new
                        {
                            PositionId = 6,
                            Title = "Системный администратор"
                        },
                        new
                        {
                            PositionId = 7,
                            Title = "Сетевой инженер"
                        },
                        new
                        {
                            PositionId = 8,
                            Title = "Директор по IT"
                        },
                        new
                        {
                            PositionId = 9,
                            Title = "HR-специалист"
                        },
                        new
                        {
                            PositionId = 10,
                            Title = "Бухгалтер"
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.Responsibility", b =>
                {
                    b.Property<int>("ResponsibilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ResponsibilityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ResponsibilityId");

                    b.ToTable("Responsibility");

                    b.HasData(
                        new
                        {
                            ResponsibilityId = 1,
                            Name = "Заключение договоров"
                        },
                        new
                        {
                            ResponsibilityId = 2,
                            Name = "Распространение агитационного материала"
                        },
                        new
                        {
                            ResponsibilityId = 3,
                            Name = "Работа с клиентами"
                        },
                        new
                        {
                            ResponsibilityId = 4,
                            Name = "Ведение переговоров"
                        },
                        new
                        {
                            ResponsibilityId = 5,
                            Name = "Организация и проведение презентаций"
                        },
                        new
                        {
                            ResponsibilityId = 6,
                            Name = "Мониторинг рынка и конкурентов"
                        },
                        new
                        {
                            ResponsibilityId = 7,
                            Name = "Планирование и оценка бюджета"
                        },
                        new
                        {
                            ResponsibilityId = 8,
                            Name = "Подготовка отчетности"
                        },
                        new
                        {
                            ResponsibilityId = 9,
                            Name = "Участие в выставках и конференциях"
                        },
                        new
                        {
                            ResponsibilityId = 10,
                            Name = "Поддержка продуктов компании"
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SkillId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("Employment.WPF.Models.Street", b =>
                {
                    b.Property<int>("StreetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StreetId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.Property<int>("StreeTypetId")
                        .HasColumnType("integer");

                    b.HasKey("StreetId");

                    b.HasIndex("StreeTypetId");

                    b.ToTable("Street");

                    b.HasData(
                        new
                        {
                            StreetId = 920,
                            Name = "Ленина",
                            StreeTypetId = 1
                        },
                        new
                        {
                            StreetId = 919,
                            Name = "Мира",
                            StreeTypetId = 3
                        },
                        new
                        {
                            StreetId = 918,
                            Name = "Советская",
                            StreeTypetId = 4
                        },
                        new
                        {
                            StreetId = 917,
                            Name = "Молодежная",
                            StreeTypetId = 1
                        },
                        new
                        {
                            StreetId = 916,
                            Name = "Центральная",
                            StreeTypetId = 1
                        },
                        new
                        {
                            StreetId = 915,
                            Name = "Школьная",
                            StreeTypetId = 4
                        },
                        new
                        {
                            StreetId = 914,
                            Name = "Новая",
                            StreeTypetId = 5
                        },
                        new
                        {
                            StreetId = 913,
                            Name = "Заречная",
                            StreeTypetId = 4
                        },
                        new
                        {
                            StreetId = 912,
                            Name = "Садовая",
                            StreeTypetId = 5
                        },
                        new
                        {
                            StreetId = 911,
                            Name = "Луговая",
                            StreeTypetId = 1
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.StreetType", b =>
                {
                    b.Property<int>("StreetTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StreetTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(63)
                        .HasColumnType("character varying(63)");

                    b.HasKey("StreetTypeId");

                    b.ToTable("StreetType");

                    b.HasData(
                        new
                        {
                            StreetTypeId = 1,
                            Name = "Улица",
                            ShortName = "ул."
                        },
                        new
                        {
                            StreetTypeId = 2,
                            Name = "Проспект",
                            ShortName = "пр."
                        },
                        new
                        {
                            StreetTypeId = 3,
                            Name = "Бульвар",
                            ShortName = "бул."
                        },
                        new
                        {
                            StreetTypeId = 4,
                            Name = "Переулок",
                            ShortName = "пер."
                        },
                        new
                        {
                            StreetTypeId = 5,
                            Name = "Проезд",
                            ShortName = "пр-д"
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.Vacancy", b =>
                {
                    b.Property<int>("VacancyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VacancyId"));

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("EducationId")
                        .HasColumnType("integer");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<double?>("LowerAge")
                        .HasColumnType("double precision");

                    b.Property<double?>("LowerSalary")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<bool>("SocialPackage")
                        .HasColumnType("boolean");

                    b.Property<double?>("TopAge")
                        .HasColumnType("double precision");

                    b.Property<double?>("UpperSalary")
                        .HasColumnType("double precision");

                    b.Property<bool>("WorkBookRegistration")
                        .HasColumnType("boolean");

                    b.HasKey("VacancyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EducationId");

                    b.HasIndex("PositionId");

                    b.ToTable("Vacancy");

                    b.HasData(
                        new
                        {
                            VacancyId = 896,
                            CompanyId = new Guid("09dc7a08-b773-44cb-9bf2-6b826da12703"),
                            EducationId = 1,
                            Gender = "Не указан",
                            LowerAge = 19.0,
                            LowerSalary = 52000.0,
                            Name = "Вакансия 1 в <ООО Ромашка>",
                            OpenDate = new DateTime(2023, 9, 11, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5495),
                            PositionId = 1,
                            SocialPackage = false,
                            TopAge = 59.0,
                            UpperSalary = 69000.0,
                            WorkBookRegistration = false
                        },
                        new
                        {
                            VacancyId = 895,
                            CompanyId = new Guid("09dc7a08-b773-44cb-9bf2-6b826da12703"),
                            EducationId = 4,
                            Gender = "Мужской",
                            LowerAge = 18.0,
                            LowerSalary = 45000.0,
                            Name = "Вакансия 2 в <ООО Ромашка>",
                            OpenDate = new DateTime(2023, 8, 27, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5528),
                            PositionId = 5,
                            SocialPackage = false,
                            TopAge = 63.0,
                            UpperSalary = 71000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 890,
                            CompanyId = new Guid("305d33d0-4be9-4fb9-a10e-4e7039911815"),
                            EducationId = 3,
                            Gender = "Не указан",
                            LowerAge = 19.0,
                            LowerSalary = 32000.0,
                            Name = "Вакансия 1 в <ЗАО Подсолнух>",
                            OpenDate = new DateTime(2023, 9, 4, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5594),
                            PositionId = 8,
                            SocialPackage = false,
                            TopAge = 67.0,
                            UpperSalary = 71000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 889,
                            CloseDate = new DateTime(2023, 9, 22, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5611),
                            CompanyId = new Guid("305d33d0-4be9-4fb9-a10e-4e7039911815"),
                            EducationId = 1,
                            Gender = "Не указан",
                            LowerAge = 19.0,
                            LowerSalary = 35000.0,
                            Name = "Вакансия 2 в <ЗАО Подсолнух>",
                            OpenDate = new DateTime(2023, 8, 21, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5610),
                            PositionId = 3,
                            SocialPackage = true,
                            TopAge = 56.0,
                            UpperSalary = 70000.0,
                            WorkBookRegistration = false
                        },
                        new
                        {
                            VacancyId = 884,
                            CompanyId = new Guid("00cb7216-f4b6-43db-8849-e18bbb48272c"),
                            EducationId = 3,
                            Gender = "Женский",
                            LowerAge = 18.0,
                            LowerSalary = 28000.0,
                            Name = "Вакансия 1 в <ПАО Лес>",
                            OpenDate = new DateTime(2023, 9, 2, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5649),
                            PositionId = 1,
                            SocialPackage = false,
                            TopAge = 56.0,
                            UpperSalary = 61000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 883,
                            CompanyId = new Guid("00cb7216-f4b6-43db-8849-e18bbb48272c"),
                            EducationId = 1,
                            Gender = "Не указан",
                            LowerAge = 23.0,
                            LowerSalary = 33000.0,
                            Name = "Вакансия 2 в <ПАО Лес>",
                            OpenDate = new DateTime(2023, 9, 5, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5662),
                            PositionId = 3,
                            SocialPackage = false,
                            TopAge = 55.0,
                            UpperSalary = 74000.0,
                            WorkBookRegistration = false
                        },
                        new
                        {
                            VacancyId = 878,
                            CompanyId = new Guid("1c46902e-e53b-41e9-8517-d274a50cdc2f"),
                            EducationId = 1,
                            Gender = "Мужской",
                            LowerAge = 21.0,
                            LowerSalary = 48000.0,
                            Name = "Вакансия 1 в <ООО Горизонт>",
                            OpenDate = new DateTime(2023, 9, 6, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5694),
                            PositionId = 7,
                            SocialPackage = true,
                            TopAge = 57.0,
                            UpperSalary = 62000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 877,
                            CloseDate = new DateTime(2023, 10, 9, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5728),
                            CompanyId = new Guid("1c46902e-e53b-41e9-8517-d274a50cdc2f"),
                            EducationId = 1,
                            Gender = "Мужской",
                            LowerAge = 19.0,
                            LowerSalary = 44000.0,
                            Name = "Вакансия 2 в <ООО Горизонт>",
                            OpenDate = new DateTime(2023, 8, 20, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5727),
                            PositionId = 2,
                            SocialPackage = false,
                            TopAge = 52.0,
                            UpperSalary = 63000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 872,
                            CloseDate = new DateTime(2023, 10, 7, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5760),
                            CompanyId = new Guid("95c018c1-80a7-4428-bcd0-738e0e2a3b1a"),
                            EducationId = 1,
                            Gender = "Не указан",
                            LowerAge = 22.0,
                            LowerSalary = 25000.0,
                            Name = "Вакансия 1 в <ЗАО Ветерок>",
                            OpenDate = new DateTime(2023, 8, 22, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5760),
                            PositionId = 4,
                            SocialPackage = false,
                            TopAge = 67.0,
                            UpperSalary = 74000.0,
                            WorkBookRegistration = false
                        },
                        new
                        {
                            VacancyId = 871,
                            CloseDate = new DateTime(2023, 9, 19, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5775),
                            CompanyId = new Guid("95c018c1-80a7-4428-bcd0-738e0e2a3b1a"),
                            EducationId = 4,
                            Gender = "Мужской",
                            LowerAge = 18.0,
                            LowerSalary = 50000.0,
                            Name = "Вакансия 2 в <ЗАО Ветерок>",
                            OpenDate = new DateTime(2023, 8, 22, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5775),
                            PositionId = 5,
                            SocialPackage = false,
                            TopAge = 51.0,
                            UpperSalary = 84000.0,
                            WorkBookRegistration = false
                        },
                        new
                        {
                            VacancyId = 866,
                            CloseDate = new DateTime(2023, 9, 30, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5806),
                            CompanyId = new Guid("fc856d8a-ec49-4b58-bfe2-4228dd2d02bc"),
                            EducationId = 4,
                            Gender = "Женский",
                            LowerAge = 22.0,
                            LowerSalary = 27000.0,
                            Name = "Вакансия 1 в <ПАО Закат>",
                            OpenDate = new DateTime(2023, 8, 23, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5806),
                            PositionId = 6,
                            SocialPackage = true,
                            TopAge = 54.0,
                            UpperSalary = 79000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 865,
                            CompanyId = new Guid("fc856d8a-ec49-4b58-bfe2-4228dd2d02bc"),
                            EducationId = 1,
                            Gender = "Мужской",
                            LowerAge = 19.0,
                            LowerSalary = 49000.0,
                            Name = "Вакансия 2 в <ПАО Закат>",
                            OpenDate = new DateTime(2023, 8, 26, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5822),
                            PositionId = 3,
                            SocialPackage = true,
                            TopAge = 55.0,
                            UpperSalary = 91000.0,
                            WorkBookRegistration = false
                        },
                        new
                        {
                            VacancyId = 860,
                            CloseDate = new DateTime(2023, 9, 22, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5885),
                            CompanyId = new Guid("7533b048-2445-4836-8f14-b6acb4c825c4"),
                            EducationId = 2,
                            Gender = "Не указан",
                            LowerAge = 19.0,
                            LowerSalary = 27000.0,
                            Name = "Вакансия 1 в <ООО Светлячок>",
                            OpenDate = new DateTime(2023, 8, 24, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5885),
                            PositionId = 3,
                            SocialPackage = true,
                            TopAge = 50.0,
                            UpperSalary = 95000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 859,
                            CompanyId = new Guid("7533b048-2445-4836-8f14-b6acb4c825c4"),
                            EducationId = 1,
                            Gender = "Мужской",
                            LowerAge = 18.0,
                            LowerSalary = 27000.0,
                            Name = "Вакансия 2 в <ООО Светлячок>",
                            OpenDate = new DateTime(2023, 8, 26, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5898),
                            PositionId = 9,
                            SocialPackage = true,
                            TopAge = 53.0,
                            UpperSalary = 92000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 854,
                            CompanyId = new Guid("dc0ab0c3-861e-453f-b626-7b769aa0b7ec"),
                            EducationId = 1,
                            Gender = "Не указан",
                            LowerAge = 22.0,
                            LowerSalary = 49000.0,
                            Name = "Вакансия 1 в <ООО Гора>",
                            OpenDate = new DateTime(2023, 9, 17, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5925),
                            PositionId = 1,
                            SocialPackage = true,
                            TopAge = 51.0,
                            UpperSalary = 64000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 853,
                            CompanyId = new Guid("dc0ab0c3-861e-453f-b626-7b769aa0b7ec"),
                            EducationId = 4,
                            Gender = "Не указан",
                            LowerAge = 21.0,
                            LowerSalary = 58000.0,
                            Name = "Вакансия 2 в <ООО Гора>",
                            OpenDate = new DateTime(2023, 9, 7, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(5938),
                            PositionId = 1,
                            SocialPackage = false,
                            TopAge = 61.0,
                            UpperSalary = 87000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 848,
                            CloseDate = new DateTime(2023, 10, 11, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(6020),
                            CompanyId = new Guid("b03e0f65-250c-4b83-b6e8-515cd65902a6"),
                            EducationId = 3,
                            Gender = "Не указан",
                            LowerAge = 20.0,
                            LowerSalary = 53000.0,
                            Name = "Вакансия 1 в <ПАО Волна>",
                            OpenDate = new DateTime(2023, 9, 16, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(6019),
                            PositionId = 4,
                            SocialPackage = true,
                            TopAge = 60.0,
                            UpperSalary = 92000.0,
                            WorkBookRegistration = true
                        },
                        new
                        {
                            VacancyId = 847,
                            CloseDate = new DateTime(2023, 10, 13, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(6036),
                            CompanyId = new Guid("b03e0f65-250c-4b83-b6e8-515cd65902a6"),
                            EducationId = 2,
                            Gender = "Не указан",
                            LowerAge = 20.0,
                            LowerSalary = 32000.0,
                            Name = "Вакансия 2 в <ПАО Волна>",
                            OpenDate = new DateTime(2023, 9, 7, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(6036),
                            PositionId = 3,
                            SocialPackage = false,
                            TopAge = 68.0,
                            UpperSalary = 64000.0,
                            WorkBookRegistration = false
                        },
                        new
                        {
                            VacancyId = 842,
                            CompanyId = new Guid("95f9bf51-47de-4480-ab55-38a344209670"),
                            EducationId = 1,
                            Gender = "Не указан",
                            LowerAge = 22.0,
                            LowerSalary = 30000.0,
                            Name = "Вакансия 1 в <ООО Долина>",
                            OpenDate = new DateTime(2023, 8, 31, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(6067),
                            PositionId = 9,
                            SocialPackage = false,
                            TopAge = 68.0,
                            UpperSalary = 92000.0,
                            WorkBookRegistration = false
                        },
                        new
                        {
                            VacancyId = 841,
                            CloseDate = new DateTime(2023, 10, 6, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(6083),
                            CompanyId = new Guid("95f9bf51-47de-4480-ab55-38a344209670"),
                            EducationId = 4,
                            Gender = "Мужской",
                            LowerAge = 22.0,
                            LowerSalary = 40000.0,
                            Name = "Вакансия 2 в <ООО Долина>",
                            OpenDate = new DateTime(2023, 9, 11, 18, 56, 50, 219, DateTimeKind.Utc).AddTicks(6083),
                            PositionId = 6,
                            SocialPackage = true,
                            TopAge = 55.0,
                            UpperSalary = 71000.0,
                            WorkBookRegistration = false
                        });
                });

            modelBuilder.Entity("Employment.WPF.Models.VacancyResponsibility", b =>
                {
                    b.Property<int>("VacancyId")
                        .HasColumnType("integer");

                    b.Property<int>("ResponsibilityId")
                        .HasColumnType("integer");

                    b.HasKey("VacancyId", "ResponsibilityId");

                    b.HasIndex("ResponsibilityId");

                    b.ToTable("VacancyResponsibility");
                });

            modelBuilder.Entity("Employment.WPF.Models.VacancySkill", b =>
                {
                    b.Property<int>("VacancyId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.HasKey("VacancyId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("VacancySkill");
                });

            modelBuilder.Entity("Employment.WPF.Models.Address", b =>
                {
                    b.HasOne("Employment.WPF.Models.Company", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Employment.WPF.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("ExternalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Employment.WPF.Models.Locality", "Locality")
                        .WithMany("Addresses")
                        .HasForeignKey("LocalityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment.WPF.Models.Street", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Locality");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Employment.WPF.Models.Locality", b =>
                {
                    b.HasOne("Employment.WPF.Models.LocalityType", "LocalityType")
                        .WithMany("Localities")
                        .HasForeignKey("LocalityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalityType");
                });

            modelBuilder.Entity("Employment.WPF.Models.Phone", b =>
                {
                    b.HasOne("Employment.WPF.Models.Company", "Company")
                        .WithMany("Phones")
                        .HasForeignKey("ExternalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Employment.WPF.Models.Street", b =>
                {
                    b.HasOne("Employment.WPF.Models.StreetType", "StreetType")
                        .WithMany()
                        .HasForeignKey("StreeTypetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreetType");
                });

            modelBuilder.Entity("Employment.WPF.Models.Vacancy", b =>
                {
                    b.HasOne("Employment.WPF.Models.Company", "Company")
                        .WithMany("Vacancies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Employment.WPF.Models.Education", "Education")
                        .WithMany("Vacancies")
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Employment.WPF.Models.Position", "Position")
                        .WithMany("Vacancies")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Education");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("Employment.WPF.Models.VacancyResponsibility", b =>
                {
                    b.HasOne("Employment.WPF.Models.Responsibility", "Responsibility")
                        .WithMany("Vacancies")
                        .HasForeignKey("ResponsibilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment.WPF.Models.Vacancy", "Vacancy")
                        .WithMany("Responsibilities")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Responsibility");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Employment.WPF.Models.VacancySkill", b =>
                {
                    b.HasOne("Employment.WPF.Models.Skill", "Skill")
                        .WithMany("Vacancies")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Employment.WPF.Models.Vacancy", "Vacancy")
                        .WithMany("Skills")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Employment.WPF.Models.Company", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Phones");

                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Employment.WPF.Models.Education", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Employment.WPF.Models.Locality", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Employment.WPF.Models.LocalityType", b =>
                {
                    b.Navigation("Localities");
                });

            modelBuilder.Entity("Employment.WPF.Models.Position", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Employment.WPF.Models.Responsibility", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Employment.WPF.Models.Skill", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("Employment.WPF.Models.Vacancy", b =>
                {
                    b.Navigation("Responsibilities");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
